---
- name: Prepare System
  hosts: kubernetes
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5
    - name: Populate service facts
      ansible.builtin.service_facts:
  tasks:
    - name: Locale
      block:
        - name: Locale | Set timezone
          community.general.timezone:
            name: "Europe/Prague"

    - name: Packages
      block:
        - name: Packages | Install
          ansible.builtin.apt:
            name: apt-transport-https,ca-certificates,conntrack,curl,dirmngr,gdisk,gnupg,hdparm,htop,
              iptables,iputils-ping,ipvsadm,libseccomp2,lm-sensors,net-tools,nfs-common,
              nvme-cli,open-iscsi,parted,psmisc,python3,python3-apt,python3-kubernetes,python3-yaml,
              smartmontools,socat,software-properties-common,unzip,usbip,util-linux
            install_recommends: false

    - name: Network Configuration
      block:
        - name: Network Configuration | Set hostname
          notify: Reboot
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"
        - name: Network Configuration | Update hosts
          ansible.builtin.copy:
            content: |
              127.0.0.1 localhost
              127.0.1.1 {{ inventory_hostname }}

              # The following lines are desirable for IPv6 capable hosts
              ::1     localhost ip6-localhost ip6-loopback
              ff02::1 ip6-allnodes
              ff02::2 ip6-allrouters
            dest: /etc/hosts
            mode: preserve
        - name: Network Configuration | Add custom /etc/resolv.conf
          ansible.builtin.copy:
            mode: '0644'
            dest: /etc/resolv.conf
            content: |
              search .
              nameserver 192.168.1.1

    - name: System Configuration
      block:
        - name: System Configuration | Disable apparmor
          when: ansible_facts.services['apparmor.service'] is defined
          ansible.builtin.systemd:
            name: apparmor
            state: stopped
            masked: true
        - name: System Configuration | Disable swap
          notify: Reboot
          ansible.posix.mount:
            name: "{{ item }}"
            fstype: swap
            state: absent
          loop: ["none", "swap"]
        - name: System Configuration | Create Kernel modules
          ansible.builtin.copy:
            dest: "/etc/modules-load.d/{{ item }}.conf"
            mode: "0644"
            content: "{{ item }}"
          loop: ["br_netfilter", "ceph", "ip_vs", "ip_vs_rr", "iptable_mangle", "iptable_raw", "nbd", "overlay", "rbd", "usbip_host", "xt_socket"]
          register: modules_status
        - name: System Configuration | Reload Kernel modules # noqa: no-changed-when no-handler
          when: modules_status.changed
          ansible.builtin.systemd:
            name: systemd-modules-load
            state: restarted
        - name: System Configuration | Sysctl
          notify: Reboot
          ansible.posix.sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_file: /etc/sysctl.d/99-kubernetes.conf
            reload: true
          with_dict: "{{ sysctl_config }}"
          vars:
            sysctl_config:
              fs.inotify.max_queued_events: 65536
              fs.inotify.max_user_watches: 524288
              fs.inotify.max_user_instances: 8192
              net.core.rmem_max: 2500000
              net.core.wmem_max: 2500000

    - name: Usbip Configuration
      block:
        - name: Usbip Configuration | Add /etc/systemd/system/usbipd.service
          ansible.builtin.copy:
            dest: "/etc/systemd/system/usbipd.service"
            mode: "0644"
            content: |
              [Unit]
              Description=USB over IP Host Daemon
              After=network.target

              [Service]
              Type=simple
              User=root
              Group=root
              UMask=027
              ExecStart=/usr/sbin/usbipd --ipv4
              Restart=on-failure

              [Install]
              WantedBy=multi-user.target
          register: usbip_usbipd_service_status
        - name: Usbip Configuration | Restart Usbip service # noqa: no-changed-when no-handler
          when: usbip_usbipd_service_status.changed
          ansible.builtin.systemd:
            name: usbipd.service
            enabled: true
            daemon_reload: true
            state: restarted
        - name: Usbip Configuration | Update udev rules /etc/udev/rules.d/91-usbip-server-tools.rules
          ansible.builtin.copy:
            dest: "/etc/udev/rules.d/91-usbip-server-tools.rules"
            force: false
            mode: "0644"
            content: |
              # Nabu Casa SkyConnect
              SUBSYSTEM=="usb" \
              , ACTION=="add" \
              , ATTRS{idVendor}=="10c4" \
              , ATTRS{idProduct}=="ea60" \
              , ATTRS{manufacturer}=="Nabu Casa" \
              , ATTRS{product}=="SkyConnect v1.0" \
              , RUN+="/usr/sbin/usbip bind -b %k"
          register: usbip_udev_rules_status
        - name: Usbip Configuration | Reload Usbip udev rules # noqa: no-changed-when no-handler
          when: usbip_udev_rules_status.changed
          ansible.builtin.command:
            cmd: "/usr/bin/udevadm control --reload-rules"
        - name: Usbip Configuration | Trigger usbadm # noqa: no-changed-when no-handler
          when: usbip_udev_rules_status.changed
          ansible.builtin.command:
            cmd: "/usr/bin/udevadm trigger"

  handlers:
    - name: Reboot
      throttle: 1
      ansible.builtin.reboot:
        msg: Rebooting hosts
        reboot_timeout: 3600
