---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/refs/heads/main/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres17
spec:
  instances: 3
  imageName: ghcr.io/cloudnative-pg/postgresql:17.2-26
  primaryUpdateMethod: switchover
  primaryUpdateStrategy: unsupervised
  storage:
    size: 15Gi
    storageClass: local-database
  superuserSecret:
    name: postgres-cluster-secret
  enableSuperuserAccess: true
  postgresql:
    parameters:
      max_wal_size: "4096"  # See walSegmentSize: 1024 in bootstrap.initdb
      shared_buffers: "256MB"
      # ZFS tuning
      # https://openzfs.github.io/openzfs-docs/Performance%20and%20Tuning/Workload%20Tuning.html#postgresql
      # https://vadosware.io/post/everything-ive-seen-on-optimizing-postgres-on-zfs-on-linux/
      # https://kubeblocks.io/blog/A-testing-report-for-optimizing-PG-performance-on-Kubernetes
      recovery_prefetch: "try"
      wal_init_zero: "off"
      wal_recycle: "off"
      # pg_rewind requires full_page_writes on
      # https://www.postgresql.org/docs/current/app-pgrewind.html
      full_page_writes: "on"
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: true
  resources:
    requests:
      cpu: 20m
    limits:
      memory: 4Gi
  monitoring:
    enablePodMonitor: true
    # https://github.com/cloudnative-pg/cloudnative-pg/issues/2501
    podMonitorMetricRelabelings:
      - { sourceLabels: ["cluster"], targetLabel: cnpg_cluster, action: replace }
      - { regex: cluster, action: labeldrop }
  backup:
    barmanObjectStore: &barmanObjectStore
      # Note: serverName version needs to be incremented
      # when recovering from an existing cnpg cluster
      serverName: &currentCluster postgres17-v1
      data:
        compression: bzip2
        encryption: AES256
      wal:
        compression: bzip2
        encryption: AES256
      destinationPath: s3://home-ops-postgresql
      endpointURL: https://s3.${STORAGE_DOMAIN}
      s3Credentials:
        accessKeyId:
          name: postgres-cluster-secret
          key: MINIO_ACCESS_KEY
        secretAccessKey:
          name: postgres-cluster-secret
          key: MINIO_SECRET_KEY
    retentionPolicy: "30d"
  bootstrap:
    ### Initialize new cluster
    initdb:
      # The postgres-db-manager user will be used to create databases using onedr0p/postgres-init
      database: postgres-db-manager
      owner: postgres-db-manager
      secret:
        name: postgres-secret
      postInitApplicationSQL:
        - ALTER USER "postgres-db-manager" WITH SUPERUSER;
      # ZFS tuning
      walSegmentSize: 1024
    #   ### Import databases from previous major version cluster
    #   import:
    #     type: monolith
    #     databases:
    #       - '*'
    #     roles:
    #       - '*'
    #     source:
    #       externalCluster: &previousCluster postgres16
    ### Recover from previous cluster barman backup
    # recovery:
    #   source: &previousCluster postgres16-v0
  # externalClusters:
  #   - name: *previousCluster
  #     ### Import databases from previous major version cluster
  #     # connectionParameters:
  #     #   host: postgres17-rw.database.svc.cluster.local
  #     #   user: postgres
  #     #   dbname: postgres
  #     # password:
  #     #   name: postgres-cluster-secret
  #     #   key: password
  #     ### Recover from previous cluster barman backup
  #     # barmanObjectStore:
  #     #   <<: *barmanObjectStore
  #     #   serverName: *previousCluster
